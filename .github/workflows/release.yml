name: Release

# タグの生成をトリガーに以下を実施する。
# 1. パッケージのzipファイルを作成
#    - `/Packages`以下の各パッケージディレクトリからzipを`{name}-{x.y.z}.zip`として作成
# 2. package.jsonを作成
#    - 各`/Packages/*/package.json`を`{name}-{x.y.z}.json`として作成
# 3. GitHub ReleaseのAssetsとしてアップロード
# 4. VPMリポジトリにパッケージをプッシュ

# VPMリポジトリへのプッシュには、`VPM_REPO_PAT`という名前のPersonal Access Tokenが必要?

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release Version (e.g., 1.2.3)'
        required: true
        default: '0.0.0-test'
  push:
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - uses: actions/checkout@v4

      # Set environment Variables
      - name: Set Environment Variables
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=$(echo "${GITHUB_REF}" | sed 's#refs/tags/v##')
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Release version set to: ${VERSION}"

      # Create package
      - name: Create Package Zip
        id: make_zip
        run: |
          set -e
          mkdir -p release
          
          for package_dir in $(find ./Packages -maxdepth 2 -name 'package.json' -exec dirname {} \;); do
            # パッケージ名を取得 
            package_name=$(basename "$package_dir")
            zip_file="release/${package_name}-${{ env.VERSION }}.zip"
            json_file="release/${package_name}-${{ env.VERSION }}.json"
            
            echo "-> Creating zip for '${package_name}' at '${zip_file}'"
            # zipファイルを作成
            # サブシェルを使用して、現在のディレクトリを変更しないようにする
            (cd "$package_dir" && zip -r "$OLDPWD/${zip_file}" . -x ".git/*")
          
            echo "-> Copying package.json for '${package_name}' to '${json_file}'"
            cp "${package_dir}/package.json" "${json_file}"
          done
      - name: Check Package Zip
        run:  echo ${{steps.make_zip.outputs.files}}

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          # The body of the release. You can customize this.
          body: "Release version v${{ env.VERSION }}"
          # Upload all files from the 'release' directory as release assets.
          files: release/*
          # The name of the release.
          name: "Release v${{ env.VERSION }}"
          # The tag name for the release. The action infers this from the event.
          tag_name: ${{ github.ref_name }}

      # VPMリポジトリにプッシュする
      # Checkout VPM Repository
      - name: Checkout VPM Repository
        uses: actions/checkout@v4
        with:
          repository: 'VirtualAviationJapan/vpm'
          path: 'vpm-repo'
          # token: ${{ secrets.VPM_REPO_PAT }}

      - name: Copy artifact to target repository
        run: |
          mkdir -p vpm-repo/packages
          cp -a release/*.json vpm-repo/packages/

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          # token: ${{ secrets.VPM_REPO_PAT }}
          path: vpm-repo
          commit-message: "add: URC-Redux v${{ env.VERSION }} packages"
          title: "Update URC-Redux packages to v${{ env.VERSION }}"
          body: This PR updates the URC-Redux packages to version v${{ env.VERSION }}.
          branch: "update-urc-redux-packages-${{ env.VERSION }}"
          base: "master"
          delete-branch: 'true'
